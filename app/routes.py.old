from flask import Blueprint, render_template, redirect, url_for, flash, request, abort, jsonify, session, current_app
from flask_login import login_user, logout_user, login_required, current_user
from app import db, mail
from app.models import User, Post, Comment
from app.forms import (
    LoginForm, RegistrationForm, PostForm, UserUpdateForm, ProfileUpdateForm, 
    CommentForm, ChatMessageForm, PasswordChangeForm, UserProfileForm
)
from werkzeug.urls import urlsplit, urlparse
from functools import wraps
import os
import requests
import json
import markdown
from markdown.extensions import fenced_code, tables, nl2br
from app.utils import upload_image_to_supabase, send_registration_confirmation_email, send_premium_confirmation_email
import logging
import traceback
from datetime import datetime, timedelta
import time
import secrets
from flask_wtf import CSRFProtect
from flask_wtf.csrf import generate_csrf
from flask_mail import Message
from threading import Thread
import stripe

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.FileHandler("app_debug.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('blog_app')

# Configurar logger específico para email
email_logger = logging.getLogger('email_debug')
email_logger.setLevel(logging.DEBUG)
email_handler = logging.FileHandler('email_debug.log')
email_handler.setFormatter(logging.Formatter('%(asctime)s [%(levelname)s] %(name)s: %(message)s'))
email_logger.addHandler(email_handler)

# Blueprints
main_bp = Blueprint('main', __name__)
auth_bp = Blueprint('auth', __name__)
admin_bp = Blueprint('admin', __name__)
user_bp = Blueprint('user', __name__)
temp_bp = Blueprint('temporary', __name__)
ai_chat_bp = Blueprint('ai_chat', __name__)

# Decoradores personalizados
def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated or not current_user.is_admin:
            flash('You do not have permission to access this page.', 'danger')
            return redirect(url_for('main.index'))
        return f(*args, **kwargs)
    return decorated_function

def premium_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated or not current_user.is_premium:
            flash('This content is exclusive for premium users.', 'info')
            return redirect(url_for('main.index'))
        return f(*args, **kwargs)
    return decorated_function

# Rotas principais (main_bp)
@main_bp.route('/')
def index():
    """Rota para a página inicial"""
    try:
        page = request.args.get('page', 1, type=int)
        posts = Post.query.order_by(Post.created_at.desc()).paginate(
            page=page, per_page=5, error_out=False)
        
        # Verificar e consertar posts com imagens quebradas
        for post in posts.items:
            if post.id == 4:
                post.image_url = "https://img.freepik.com/free-photo/side-view-couple-holding-each-other_23-2148735555.jpg?t=st=1742409398~exp=1742412998~hmac=59e342a62de1c61aedc5a53c00356ab4406ded130e98eca884480d2d68360910&w=900"
                db.session.commit()
            elif not post.image_url or not post.image_url.strip() or (not post.image_url.startswith(('http://', 'https://')) and post.image_url.startswith('/static/')):
                static_path = os.path.join('app', post.image_url[1:] if post.image_url.startswith('/') else '')
                if not os.path.exists(static_path):
                    post.image_url = 'https://via.placeholder.com/1200x400?text=Post+' + str(post.id)
                    db.session.commit()
        
        return render_template('public/index.html', posts=posts)
    except Exception as e:
        logger.error(f"ERRO NA PÁGINA INICIAL: {str(e)}")
        return render_template('errors/500.html', error=str(e)), 500

@main_bp.route('/post/<int:post_id>')
def post(post_id):
    post = Post.query.get_or_404(post_id)
    
   
    # Verificar se o post é premium e se o usuário NÃO tem acesso premium
    can_access_premium = current_user.is_authenticated and (current_user.is_premium or current_user.is_admin)
    
    if post.premium_only and not can_access_premium:
        flash('This content is exclusive for premium users.', 'info')
    
    # Buscar posts recentes (excluindo o atual)
    recent_posts = Post.query.filter(Post.id != post_id).order_by(Post.created_at.desc()).limit(3).all()
    
    # Buscar comentários aprovados
    comments = post.comments.filter_by(approved=True).order_by(Comment.created_at.desc()).all()
    
    # Formulário para novos comentários
    form = CommentForm()
    
    return render_template('public/post.html', post=post, recent_posts=recent_posts, form=form, comments=comments)

@main_bp.route('/post/<int:post_id>/comment', methods=['POST'])
@login_required
def add_comment(post_id):
    post = Post.query.get_or_404(post_id)
    form = CommentForm()
    
    if form.validate_on_submit():
        comment = Comment(
            content=form.content.data,
            author=current_user,
            post=post,
            approved=current_user.is_admin  # Aprovação automática para admins
        )
        db.session.add(comment)
        db.session.commit()
        
        return jsonify({'success': True, 'message': 'Your comment has been submitted'})
    
    return jsonify({'success': False, 'message': 'An error occurred while processing your comment'})

@main_bp.route('/posts')
def all_posts():
    """Lista todos os posts com opção de filtrar por tipo e ordenar"""
    page = request.args.get('page', 1, type=int)
    post_type = request.args.get('type', 'all')  # all, free, premium
    sort_by = request.args.get('sort', 'recent')  # recent, read_time_asc, read_time_desc
    
    query = Post.query
    
    if post_type == 'free':
        query = query.filter_by(premium_only=False)
    elif post_type == 'premium':
        query = query.filter_by(premium_only=True)
    
    if sort_by == 'recent':
        query = query.order_by(Post.created_at.desc())
    elif sort_by == 'read_time_asc':
        query = query.order_by(db.func.length(Post.content).asc())
    elif sort_by == 'read_time_desc':
        query = query.order_by(db.func.length(Post.content).desc())
    else:
        query = query.order_by(Post.created_at.desc())
    
    posts = query.paginate(page=page, per_page=10, error_out=False)
    
    posts_count = {
        'all': Post.query.count(),
        'free': Post.query.filter_by(premium_only=False).count(),
        'premium': Post.query.filter_by(premium_only=True).count()
    }
    
    return render_template('public/all_posts.html', 
                          posts=posts, 
                          active_filter=post_type,
                          active_sort=sort_by,
                          posts_count=posts_count,
                          title="All Posts")

@main_bp.route('/coaching')
def coaching():
    """Render the coaching page."""
    return render_template('public/coaching.html')

@main_bp.route('/test-email')
def test_email():
    try:
        logger.info("==== INICIANDO TESTE DE EMAIL ====")
        logger.info("Configurações de email:")
        logger.info(f"MAIL_SERVER: {current_app.config['MAIL_SERVER']}")
        logger.info(f"MAIL_PORT: {current_app.config['MAIL_PORT']}")
        logger.info(f"MAIL_USE_SSL: {current_app.config['MAIL_USE_SSL']}")
        logger.info(f"MAIL_USERNAME: {current_app.config['MAIL_USERNAME']}")
        logger.info("MAIL_PASSWORD: ****")
        
        # Criar um usuário de teste
        test_user = User(
            username='joaquimhuelsen',
            email='joaquimhuelsen@gmail.com'
        )
        logger.info(f"Usuário de teste criado: {test_user.username} ({test_user.email})")
        
        # Tentar enviar o email
        logger.info("Tentando enviar email de teste...")
        send_registration_confirmation_email(test_user)
        logger.info("Email de teste enviado com sucesso!")
        
        flash('Email de teste enviado com sucesso!', 'success')
        return redirect(url_for('main.index'))
    except Exception as e:
        logger.error(f"ERRO AO ENVIAR EMAIL: {str(e)}")
        logger.error(f"Detalhes do erro: {traceback.format_exc()}")
        flash(f'Erro ao enviar email de teste: {str(e)}', 'danger')
        return redirect(url_for('main.index'))

@main_bp.route('/api/send-premium-email', methods=['POST'])
def send_premium_email():
    try:
        data = request.get_json()
        
        if not data or 'email' not in data:
            return jsonify({'error': 'Email is required'}), 400
            
        # Buscar usuário pelo email
        user = User.query.filter_by(email=data['email']).first()
        if not user:
            return jsonify({'error': 'User not found'}), 404
            
        # Enviar email
        send_premium_confirmation_email(user)
        
        return jsonify({
            'message': 'Premium confirmation email sent successfully',
            'user': {
                'username': user.username,
                'email': user.email
            }
        }), 200
        
    except Exception as e:
        logger.error(f"Error sending premium confirmation email: {str(e)}")
        logger.error(traceback.format_exc())
        return jsonify({'error': str(e)}), 500

# Rotas de autenticação (auth_bp)
@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('main.index'))
    
    form = LoginForm()
    
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        
        if user and user.check_password(form.password.data):
            login_user(user, remember=form.remember_me.data)
            next_page = request.args.get('next')
            if not next_page or urlparse(next_page).netloc != '':
                next_page = url_for('main.index')
            return redirect(next_page)
        
        flash('Invalid email or password', 'danger')
    
    return render_template('auth/login.html', form=form)

@auth_bp.route('/logout')
def logout():
    logout_user()
    session.clear()
    flash('You have been logged out.', 'info')
    return redirect(url_for('main.index'))

@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('main.index'))
    
    form = RegistrationForm()
    
    if form.validate_on_submit():
        try:
            # Verificar usuário e email existentes
            existing_user = User.query.filter_by(username=form.username.data).first()
            if existing_user:
                flash('Username already exists. Please choose a different one.', 'danger')
                return render_template('auth/register.html', form=form)
            
            existing_email = User.query.filter_by(email=form.email.data).first()
            if existing_email:
                flash('Email already registered. Please use a different one or try to login.', 'danger')
                return render_template('auth/register.html', form=form)
            
            # Criar novo usuário
            user = User(username=form.username.data, email=form.email.data)
            plain_password = form.password.data
            user.set_password(plain_password)
            user.password = plain_password  # Temporário para o email
            
            # Salvar usuário
            db.session.add(user)
            db.session.commit()
            
            # Enviar email
            logger.info(f"Enviando email de confirmação para {user.email}")
            try:
                send_registration_confirmation_email(user)
                logger.info("Email enviado com sucesso!")
            except Exception as email_error:
                logger.error(f"Erro ao enviar email: {str(email_error)}")
                logger.error(traceback.format_exc())
                # Não vamos falhar o registro se o email falhar
                flash('Your account has been created, but there was an error sending the confirmation email.', 'warning')
            
            # Limpar senha temporária
            delattr(user, 'password')
            
            flash('Your account has been created! You are now able to log in.', 'success')
            return redirect(url_for('auth.login'))
            
        except Exception as e:
            db.session.rollback()
            logger.error(f"Erro no registro: {str(e)}")
            logger.error(traceback.format_exc())
            flash('There was an error processing your registration. Please try again.', 'danger')
            return render_template('auth/register.html', form=form)
    
    return render_template('auth/register.html', form=form)

# Rotas de administração (admin_bp)
@admin_bp.route('/')
@login_required
@admin_required
def dashboard():
    posts = Post.query.order_by(Post.created_at.desc()).limit(10).all()
    pending_count = Comment.query.filter_by(approved=False).count()
    
    stats = {
        'posts_count': Post.query.count(),
        'premium_posts_count': Post.query.filter_by(premium_only=True).count(),
        'users_count': User.query.count(),
        'premium_users_count': User.query.filter_by(is_premium=True).count()
    }
    
    return render_template('admin/dashboard.html', posts=posts, pending_count=pending_count, stats=stats)

@admin_bp.route('/post/create', methods=['GET', 'POST'])
@login_required
@admin_required
def create_post():
    form = PostForm()
    
    if form.validate_on_submit():
        try:
            # Processar upload de imagem se houver
            image_url = form.image_url.data
            
            if form.image.data:
                try:
                    image_url = upload_image_to_supabase(form.image.data)
                except Exception as e:
                    flash(f'Erro ao fazer upload da imagem: {str(e)}', 'danger')
                    return render_template('admin/create_post.html', form=form)
            
            # Criar o post
            post = Post(
                title=form.title.data,
                content=form.content.data,
                summary=form.summary.data,
                image_url=image_url or 'https://via.placeholder.com/1200x400',
                reading_time=form.reading_time.data,
                premium_only=form.premium_only.data,
                author=current_user
            )
            
            if form.created_at.data:
                post.created_at = form.created_at.data
            
            db.session.add(post)
            db.session.commit()
            flash('Post criado com sucesso!', 'success')
            return redirect(url_for('admin.dashboard'))
            
        except Exception as e:
            db.session.rollback()
            flash(f'Erro ao criar post: {str(e)}', 'danger')
    
    return render_template('admin/create_post.html', form=form)

@admin_bp.route('/post/edit/<int:post_id>', methods=['GET', 'POST'])
@login_required
@admin_required
def edit_post(post_id):
    post = Post.query.get_or_404(post_id)
    form = PostForm(obj=post)
    
    if form.validate_on_submit():
        try:
            # Processar upload de imagem se houver
            image_url = form.image_url.data or post.image_url
            
            if form.image.data:
                try:
                    image_url = upload_image_to_supabase(form.image.data)
                except Exception as e:
                    flash(f'Erro ao fazer upload da imagem: {str(e)}', 'danger')
                    return render_template('admin/edit_post.html', form=form, post=post)
            
            # Atualizar o post
            post.title = form.title.data
            post.content = form.content.data
            post.summary = form.summary.data
            post.image_url = image_url
            post.reading_time = form.reading_time.data
            post.premium_only = form.premium_only.data
            
            if form.created_at.data:
                post.created_at = form.created_at.data
            
            db.session.commit()
            
            flash('Post atualizado com sucesso!', 'success')
            return redirect(url_for('admin.dashboard'))
            
        except Exception as e:
            db.session.rollback()
            flash(f'Erro ao atualizar post: {str(e)}', 'danger')
    
    return render_template('admin/edit_post.html', form=form, post=post)

@admin_bp.route('/post/delete/<int:post_id>', methods=['POST'])
@login_required
@admin_required
def delete_post(post_id):
    try:
        post = Post.query.get_or_404(post_id)
        Comment.query.filter_by(post_id=post_id).delete()
        db.session.delete(post)
        db.session.commit()
        flash('Post deleted successfully!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'Error deleting post: {str(e)}', 'danger')
    
    return redirect(url_for('admin.dashboard'))

@admin_bp.route('/comments/pending')
@login_required
@admin_required
def pending_comments():
    comments = Comment.query.filter_by(approved=False).order_by(Comment.created_at.desc()).all()
    pending_count = len(comments)
    return render_template('admin/comments.html', comments=comments, pending_count=pending_count)

@admin_bp.route('/comment/approve/<int:comment_id>', methods=['POST'])
@login_required
@admin_required
def approve_comment(comment_id):
    comment = Comment.query.get_or_404(comment_id)
    comment.approved = True
    db.session.commit()
    flash('Comment approved successfully!', 'success')
    return redirect(url_for('admin.pending_comments'))

@admin_bp.route('/comment/delete/<int:comment_id>', methods=['POST'])
@login_required
@admin_required
def delete_comment(comment_id):
    comment = Comment.query.get_or_404(comment_id)
    db.session.delete(comment)
    db.session.commit()
    flash('Comment deleted successfully!', 'success')
    return redirect(url_for('admin.pending_comments'))

@admin_bp.route('/users')
@login_required
@admin_required
def manage_users():
    users = User.query.order_by(User.username).all()
    return render_template('admin/users.html', users=users)

@admin_bp.route('/user/edit/<int:user_id>', methods=['GET', 'POST'])
@login_required
@admin_required
def edit_user(user_id):
    user = User.query.get_or_404(user_id)
    form = UserUpdateForm(obj=user)
    
    if form.validate_on_submit():
        user.username = form.username.data
        user.email = form.email.data
        user.age = form.age.data
        user.is_premium = form.is_premium.data
        user.is_admin = form.is_admin.data
                
        db.session.commit()
        flash('User updated successfully!', 'success')
        return redirect(url_for('admin.manage_users'))
    
    return render_template('admin/edit_user.html', form=form, user=user)

@admin_bp.route('/user/delete/<int:user_id>', methods=['POST'])
@login_required
@admin_required
def delete_user(user_id):
    if current_user.id == user_id:
        flash('You cannot delete your own account!', 'danger')
        return redirect(url_for('admin.manage_users'))
        
    user = User.query.get_or_404(user_id)
    db.session.delete(user)
    db.session.commit()
    flash('User deleted successfully!', 'success')
    return redirect(url_for('admin.manage_users')) 

# Rotas de usuário (user_bp)
@user_bp.route('/profile', methods=['GET', 'POST'])
@login_required
def profile():
    """Página de perfil do usuário"""
    form = UserProfileForm()
    
    if form.validate_on_submit():
        if form.email.data != current_user.email:
            existing_user = User.query.filter_by(email=form.email.data).first()
            if existing_user and existing_user.id != current_user.id:
                flash('Este email já está em uso por outro usuário.', 'danger')
                return render_template('user/profile.html', form=form)
            
            current_user.email = form.email.data
            
        if form.password.data:
            current_user.set_password(form.password.data)
            flash('Sua senha foi atualizada com sucesso.', 'success')
            
        if form.age.data:
            current_user.age = form.age.data
            
        db.session.commit()
        flash('Seu perfil foi atualizado com sucesso.', 'success')
        return redirect(url_for('user.profile'))
        
    elif request.method == 'GET':
        form.email.data = current_user.email
        form.age.data = current_user.age
        
    return render_template('user/profile.html', form=form)

@user_bp.route('/upgrade')
@login_required
def upgrade():
    """Página para upgrade para conta premium"""
    if current_user.is_premium:
        flash('Você já é um usuário premium!', 'info')
        return redirect(url_for('main.index'))
    
    return render_template('public/premium.html')

# Rotas temporárias (temp_bp)
SECRET_TOKEN = os.environ.get('ADMIN_CREATE_TOKEN') or secrets.token_hex(16)

@temp_bp.route('/create-admin', methods=['POST'])
def create_admin():
    """Endpoint temporário para criar um usuário admin"""
    token = request.args.get('token')
    if not token or token != SECRET_TOKEN:
        return jsonify({"error": "Invalid or missing token"}), 403
    
    data = request.get_json()
    if not data:
        return jsonify({"error": "No data provided"}), 400
    
    username = data.get('username')
    email = data.get('email')
    password = data.get('password')
    
    if not username or not email or not password:
        return jsonify({"error": "Missing required fields"}), 400
    
    existing_user = User.query.filter(
        (User.username == username) | (User.email == email)
    ).first()
    
    if existing_user:
        if existing_user.username == username:
            return jsonify({"error": f"Username '{username}' already exists"}), 409
        else:
            return jsonify({"error": f"Email '{email}' already exists"}), 409
    
    try:
        user = User(
            username=username,
            email=email,
            is_admin=True,
            is_premium=True
        )
        user.set_password(password)
        
        db.session.add(user)
        db.session.commit()
        
        return jsonify({
            "message": "Admin user created successfully",
            "user": {
                "id": user.id,
                "username": user.username,
                "email": user.email,
                "is_admin": user.is_admin
            }
        }), 201
        
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": f"Failed to create user: {str(e)}"}), 500

# Rotas de IA (ai_chat_bp)
SIMULATION_MODE = True  # Altere para False para usar a API real

@ai_chat_bp.route('/ia-relacionamento', methods=['GET', 'POST'])
def ia_relacionamento():
    """Página de IA de Relacionamento"""
    # Verificar se o usuário está autenticado e é premium
    can_access_ai = current_user.is_authenticated and (current_user.is_premium or current_user.is_admin)
    
    # Bloquear acesso para usuários não premium
    if not can_access_ai:
        flash('Este recurso de IA é exclusivo para usuários premium.', 'info')
        return redirect(url_for('main.premium_subscription'))
    
    # Verificar se é uma requisição AJAX
    is_ajax = request.headers.get('X-Requested-With') == 'XMLHttpRequest'
    
    # Inicializar formulário
    form = ChatMessageForm()
    
    # Para requisições GET, retornar template normalmente
    if request.method == 'GET' or not is_ajax:
        if 'chat_messages' not in session:
            session['chat_messages'] = []
            session.modified = True
            
        credits = -1  # -1 representa créditos ilimitados
            
        return render_template('public/ia_relacionamento.html', 
                             form=form, 
                             messages=session.get('chat_messages', []),
                             credits=credits)
    
    # Para requisições POST com AJAX
    if request.method == 'POST' and is_ajax:
        try:
            if not current_user.is_authenticated:
                return jsonify({
                    'success': False,
                    'error': "Você precisa estar logado para enviar mensagens.",
                    'redirect': url_for('auth.login')
                })
            
            if not current_user.is_premium and not current_user.is_admin:
                return jsonify({
                    'success': False,
                    'error': "Este recurso é exclusivo para usuários premium.",
                    'redirect': url_for('main.premium_subscription')
                })
            
            user_message = form.message.data
            
            if not user_message or user_message.strip() == '':
                return jsonify({
                    'success': False,
                    'error': "Por favor, digite uma mensagem válida."
                })
            
            if SIMULATION_MODE:
                time.sleep(0.5)
                
                respostas_simuladas = [
                    f"Obrigado por compartilhar isso comigo. Com base no que você descreveu sobre '{user_message[:20]}...', recomendo que você mantenha uma comunicação clara e honesta.",
                    f"Considerando sua situação com '{user_message[:15]}...', acho importante você focar primeiro em seu próprio desenvolvimento pessoal.",
                    f"Analisando o que você disse sobre '{user_message[:20]}...', sugiro dar espaço para que ambos possam refletir.",
                    f"Baseado na sua mensagem sobre '{user_message[:15]}...', recomendo estabelecer limites saudáveis.",
                    f"Sua situação com '{user_message[:20]}...' é comum em muitos relacionamentos. Lembre-se que a reconquista não deve ser forçada."
                ]
                
                assistant_response = random.choice(respostas_simuladas)
            else:
                # Implementar integração real com OpenAI aqui
                assistant_response = "Desculpe, o serviço de IA está temporariamente indisponível."
            
            # Atualizar histórico de chat
            if 'chat_messages' not in session:
                session['chat_messages'] = []
            
            session['chat_messages'].append({
                'role': 'user',
                'content': user_message
            })
            
            session['chat_messages'].append({
                'role': 'assistant',
                'content': assistant_response
            })
            
            session.modified = True
            
            return jsonify({
                'success': True,
                'message': assistant_response
            })
            
        except Exception as e:
            return jsonify({
                'success': False,
                'error': f"Erro ao processar mensagem: {str(e)}"
            })

@ai_chat_bp.route('/limpar-chat', methods=['POST'])
def limpar_chat():
    """Limpar histórico do chat"""
    try:
        session['chat_messages'] = []
        session.modified = True
        return jsonify({'success': True})
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f"Erro ao limpar chat: {str(e)}"
        })

# Configuração da Stripe
stripe.api_key = current_app.config.get('STRIPE_SECRET_KEY')
logger.info(f"Stripe API Key configurada: {stripe.api_key is not None}")

@user_bp.route('/stripe-webhook', methods=['POST'])
def stripe_webhook():
    try:
        event = None
        payload = request.data
        sig_header = request.headers.get('Stripe-Signature')
        
        try:
            event = stripe.Webhook.construct_event(
                payload, sig_header, current_app.config.get('STRIPE_WEBHOOK_SECRET')
            )
        except ValueError as e:
            logger.error(f"Erro no webhook - Payload inválido: {str(e)}")
            return jsonify({'error': 'Invalid payload'}), 400
        except stripe.error.SignatureVerificationError as e:
            logger.error(f"Erro no webhook - Assinatura inválida: {str(e)}")
            return jsonify({'error': 'Invalid signature'}), 400

        # Lidar com o evento
        if event['type'] == 'checkout.session.completed':
            session = event['data']['object']
            
            # Obter o ID do usuário do metadata
            user_id = session.get('client_reference_id')
            if not user_id:
                logger.error("ID do usuário não encontrado na sessão")
                return jsonify({'error': 'User ID not found'}), 400

            # Atualizar o status do usuário para premium
            user = User.query.get(user_id)
            if user:
                user.is_premium = True
                db.session.commit()
                logger.info(f"Usuário {user.id} atualizado para premium")
            else:
                logger.error(f"Usuário não encontrado: {user_id}")
                return jsonify({'error': 'User not found'}), 404

        return jsonify({'status': 'success'}), 200

    except Exception as e:
        logger.error(f"Erro no webhook: {str(e)}")
        logger.error(traceback.format_exc())
        return jsonify({'error': str(e)}), 500

@user_bp.route('/create-checkout-session', methods=['POST'])
@login_required
def create_checkout_session():
    try:
        logger.info("Iniciando checkout...")
        logger.info(f"Stripe API Key: {stripe.api_key}")
        
        if not stripe.api_key:
            logger.error("Stripe API Key não configurada")
            return jsonify({'error': 'Stripe API Key não configurada'}), 500
            
        checkout_session = stripe.checkout.Session.create(
            payment_method_types=['card'],
            line_items=[{
                'price_data': {
                    'currency': 'usd',
                    'unit_amount': 2000,  # $20.00
                    'product_data': {
                        'name': 'Premium Subscription',
                        'description': 'Monthly premium subscription to Blog Reconquista',
                    },
                },
                'quantity': 1,
            }],
            mode='subscription',
            success_url=url_for('user.premium_success', _external=True),
            cancel_url=url_for('user.premium_cancel', _external=True),
            client_reference_id=str(current_user.id),
        )
        
        logger.info("Sessão de checkout criada com sucesso")
        logger.info(f"Session ID: {checkout_session.id}")
        return jsonify({'id': checkout_session.id})
        
    except Exception as e:
        logger.error(f"Erro ao criar sessão de checkout: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({'error': str(e)}), 403

@user_bp.route('/premium-success')
@login_required
def premium_success():
    flash('Thank you for subscribing! Your premium access has been activated.', 'success')
    return redirect(url_for('main.index'))

@user_bp.route('/premium-cancel')
@login_required
def premium_cancel():
    flash('Your subscription was cancelled. You can try again whenever you want.', 'info')
    return redirect(url_for('user.upgrade')) 